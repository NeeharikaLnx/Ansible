ANSIBLE USES :
Agentless Architecture: Ansible doesn’t require any extra software on your remote nodes. Which makes it easy set up and use and It helps to keep the installation clean.

Open-source: Ansible one of powerful DevOps tool which is open-source.

Simple: Ansible uses the simple syntax written in YML called playbooks. YAML is simple and human readable and doesn’t require any coding skills.

Ease of use: One can configure and manages the complex infrastructure solutions very easily.

Powerful & Flexible: Ansible has powerful features that can enable even the most complex IT workflows.

Efficient: No extra software on your server means more resources for your applications.

Secure: Ansible uses SSH connection which is secure and encrypted.

Configuration Management: used to automate configuration managemet tasks such as provisionig, application deployment and infastructure management.

Scalability: Ansible can manage a large number of systems simultaneously, making it ideal for large-scale deployments.

Open-source: Free to use and has large community contributors who regularly contribute to its development.

Integrate with other tools: Ansible can be integrated with other tools such as Docker, Kubernetes and AWS, which makes it varsatile and easy to use in a variety of environments.

Push vs Pull Based Architecture
Puppet and Chef are Pull Based Architecture

Agents on the other server periodically checks for the configuration information from central server (Master)
Ansible is Push Based Architecture

Central server pusher configuration information on target servers.
What Ansible Can do ?
1) Configuration Management 
2) App Deployment 
3) Contineous Delivery 
Ansible Work-flow / Ansible Architecture
image

Ansible uses Master-Slave Architecture.

In Which Machine, Ansible is installed that machine is called as Master Node / Control Node or Ansible Server.

The Machines, which are managed by Master node they are called as Host Node / Slave node.

Inside Master Node, we are going to write 'Playbooks' to Automate our configuration Management.

Playbooks are written in YAML [Yet Another Markup Language] Language.

Ansible works by connecting to your nodes and pushing out a small program called 'Ansible Module'

Master Node is connected to Host-Node through SSH and execute the small modules on host's machine and install the software.

After Execution, The Modules will be removed on host machines.

The Master node control the entire execution of the playbook.

The Inventory file provides the list of hosts where ansible modules need to be run.

Ansible requires following three Components to automate the Network Infrastructure,

1) Control Node / Master Node 
2) Managed Nodes / Host Node
3) Ansible Playbook
Control/Master Node :
The Machine which contains ansible server is called as Control node. It will controll other Host nodes.
Managed/Host Node :
The Nodes which are managed or controlled by ansible is called Host Node /Managed Node
Ansible PlayBook :
Ansible will use Playbook to automate configurations in Host Node.

Ansible playbooks are expressed in YML format

Playbooks are a collection of tasks that will be runs on one or more hosts nodes.

Inventory File
Ansible Inventory hosts file is used to store the IP_Address of Target servers. we can list and group your host server.

The Default location is "/etc/ansible/hosts"

Note: In Inventory file, we can mention Private_IP Address or Hostname also.

Few Important Point about Inventory File
Comments begins with '#' character.

Blanklines are ignore

Group of hosts are delimited by '[header]' elements.

You can enter hostname or Ip addresses.

A hostname/ip can be a member of multiple groups.

Ungrouped hosts are specifying before any group header like below

Sample Inventory File :
#Blank lines are ignore

#Ungrouped hosts are specifying before any group header like below 

192.168.122.1    #Private_IP
192.168.122.2
192.168.122.3

[webservers]

192.168.122.1
#192.168.122.2
192.168.122.3

[dbserver]

192.168.122.1
192.168.122.2 	
silver-db1  	#hostname
silver-db2  	
Chef Work-Flow / Chef Architecture :
image

Work stations - we write cookbooks[ruby] after shared to chef master.

Chef server - we install chef and connected to chef client servers.

Chef client - we have different Nodes

If we Compare Ansible and chef - Ansible is easy to setup and run in any environment [any device]

Difference B/w Ansible, Cheff and puppet :
image

STEPS TO SETUP ANSIBLE
Create 2 RedHat Systems In AWS with .pem (Free-ties Eligible)

Master Node
Slave Node
Connect to the Nodes and create Ansible_User and Passwd

Create User

sudo useradd ansible
Create Password
sudo passwd ansible 
Configure Ansible_User in Sudo file (All Permissions like Root)
sudo visudo 
Add the following configuration in 100th line >> ansible ALL=(ALL) NOPASSWD: ALL

Configure SSH : Ansible uses SSH to connect to remote machines.
sudo vi /etc/ssh/sshd_config
Change the following configurations in below 60 line

>> Comment  ``` #PasswordAuthentication no ```

>> Un-Comment  ``` PasswordAuthentication yes ```
Now, Restart SSH Service
sudo systemctl restart sshd 
Or We can use alternate command: sudo service sshd restart

Note: Do all above steps in Master and Slave Nodes

Install Ansible In Master/Control Node
Install Ansible in Master Node
sudo amazon-linux-extras install ansible2 -y
To Varify Ansible Version, Run the following command
ansible --version 
Install Ansible Dependencies
sudo yum install python python-pip python-level openssl -y
To varify Python
python --version
That's it! You have successfully set up an Ansible server on Linux with the necessary dependencies. You can now use Ansible to automate the configuration and management of your IT infrastructure.

Ansible Default location : cd /etc/ansible
Ansible folder staructure
ansible.cfg
hosts
roles
Establish The Connection B/w Control & Host Node Through SSH 
Switch to Ansible user in Control Node
    sudo su - ansible
Generate SSH key in Ansible Server
    ssh-keygen
Click on 'Enter' 3 Times and You will get the SSH key. The Generated SSH key stored in '/home/ansible/.ssh/id_rsa'

Add the Control node's SSH key (Copy Keygen to Host Server as Ansible user):
    ssh-copy-id <user>@<slave_node_ip_address>
Replace "user" with the username you use to log in to the slave node and "slave_node_private_ip" with the IP address of the slave node. i.e, ssh-copy-id ansible@172.31.41.168 and Slave Node User Passwd: 123

Note : We can configure no. of slave nodes using above command.

We can login into slave node from control node using following command
    ssh ansible@172.31.41.168
If you want to logout from slave node, run exit command

Configure Host Server Details in Host Inventory file
    vi /etc/ansible/hosts
In the inventory file, The Host details as Grouped and Ungrouped Hosts

#Ungrouped Host can configured as 
172.31.41.168  or Host_Name

#Grouped Host Can be configured as 
[webserver]
172.31.41.168  or Host_Name
172.31.41.169  or Host_Name
These Hosts are not execute directly. if u want to execute these groups by giving permissions.

Give Permission to Inventory file and sudo_user [FROM ROOT USER]
    vi /etc/ansible/ansible.cfg
Giving permissions to Inventory and Root by removing '#'

inventory      = vi /etc/ansible/hosts   
sudo_user      = root
Using Ping module, we can varify the connection b/w Control and Host Node
    ansible all -m ping
To get the list of all hosts connected to control node
    ansible all --list-hosts
To get the particular group hosts connected to control node
    ansible <groupName> --list-hosts

    Example : ansible webserver --list-hosts
To get the particular group index value connected to control node
    ansible <groupName>[IndexValue] --list-hosts

    Example : ansible all[0] --list-hosts 
YAML (Yet Another Markup Language) :
YAML is human friendly data serialization language for all programming languages.

YAML files are both human readable and machine readable

YML files will have .yml as an extension

In YML, the data will represent in Key-Value Pair.

Indent space very important in YML language.

Official website : https://yaml.org/

Key-Value Pair Format :
---
name: silver 
email: silver@gmail.com
gender: male

...
Arrays / list Format :
---
name: 				     #element 
    firstname: naveen    #sub-element 
    lastname: silver
email: silver@gmail.com
gender: male
skills:
    - python       #list of items
    - linux
    - devops 
    - aws 
Here, - dash indicate the element of any array.

we can use VS code IDE to write and validate YML files.

PlayBooks :
Playbooks in ansible written in YAML language.

Playbooks is a single yaml files, containing one or more 'plays' in a list.

Plays are ordered sets of tasks to execute against host servers from inventory file.

Playbook code consists of vars, tasks, handlers, file, template and roles.

Each playbook is composed of one or more modules in a list.

Module is a collection of configuration files

Play defines a set of tasks to be run on hosts.

Task is an action to be performed on host.

Example:

Execute a command
Run a shell script
Install Package
Shutdown/Restart hosts.
Playbooks starts with '---' and ends with '...'

Playbook contains 3 sections :
1) Host Section : Defines the target machines on which the playbook should run. This is based on the Ansible Inventory file.

2) Variable Section: This is optional and can declare all the variables needed in the playbook.

3) Task Section: This section list out all tasks that should be executed on the target machine. it specifies the use of modules. Every tasks has a name which is small description of what the task will do and will be listed while the playbook is run.
Types of state In Playbook :
1. present - add/install
2. absent - remove/uninstall
3. latest - latest  
4. restarted - restart
Playbook Examples :
Q) Write a playbook to ping all host nodes ?

---                  #indicates yaml file 
- hosts: all           # - indicates list
  user: ansible         # user name 
  become: true         #it allows you to execute playboks as root user
  connection: ssh 

  tasks:		# here provide the list of tasks 
    - name: Ping All Host Nodes
      ping:
      remote_user: ansible
...
#Hosts - The Tasks will be executed in specified group of server.

#Name - Which is the task name that will appear in your terminal when you run the playbook.

#Remote_user - This parameter was formerly called just user.

Ansible Playbook Commands :
To Varify the Syntax of Playbook
ansible-playbook <playbookName> --syntax-check
Syntax to Execute a Playbook
ansible-playbook <PlaybookName>
Syntax to Execute a Playbook in verbose mode
ansible-playbook <PlaybookName> -v	#Details of execution 
ansible-playbook <PlaybookName> -vv	#To get more details of execution
ansible-playbook <PlaybookName> -vvv	#To get complete execution details  # -v verbosity means debug
Playbook Dry-Run Command
ansible-playbook <PlaybookName> --check
List of Hosts in Playbook
ansible-playbook <PlaybookName> --list-hosts
It will Execute one-step-at-a-time, confirm each task before running (N)o/(y)es/(c)ontinue
ansible-playbook <playbookName> --step
It will Help on Ansible-playbook Command
ansible-playbook help
Why Ansible Roles :
Ansible roles is efficient way to writing ansible playbook that will only improve your efficiency to write complex playbooks.

Best ex, Lets say i want to configure a kubernetes using ansible. so, it will have close to some 50 to 60 tasks and we have lot of variable and lots of parameters you have certificate you have secrets that you have to configure while creating the kubernetes cluster. So, for that very own reason if you try to do it with Roles like we can segregate each and everything and you can properly structure your ansible playbooks. So, thats why the concept of roles is introduced.

$ mkdir folder

$ cd folder

$ ansible-galaxy role init kubernetes

Role kubernetes was created successfully.
if you give $ ls

there is a folder called kubernetes

$ ls kubernetes

we can see bunch of files that created. This is the concept roles. Using this files and folders, we can structure ansible playbooks.

Files and folders inside roles :

meta : used to write some meta data info like liscence, author, role description.. etc

defaults :  default files we can store 
 
vars : store the variable 

tests : used add some unit tests

handlers : 

tasks : 

readme.md :

files : 

templates :



What is Static and Dynamic Inventory ?
Dynamic inventory and inventory are related concepts, but they are not exactly the same.

Inventory: Inventory, in the context of IT infrastructure management, refers to a list of hosts or devices managed by a system. This list typically includes information such as hostnames, IP addresses, and other attributes necessary for managing these devices. Traditionally, inventory lists were manually created and maintained by administrators in static files.

Dynamic Inventory: Dynamic inventory, on the other hand, is a type of inventory that is automatically generated and updated in real-time. Instead of being manually maintained, dynamic inventory is generated by scripts, plugins, or modules that query the infrastructure environment to determine the current state of the hosts. This could involve querying cloud providers, virtualization platforms, databases, or other sources of truth about the infrastructure.

Static Inventory: In a static inventory setup, you would typically have a file, say hosts.ini, where you manually list all the hosts you want Ansible to manage. Here's an example of a static inventory file:

[web_servers]
server1.example.com
server2.example.com

[db_servers]
db1.example.com
db2.example.com
In this static inventory file, server1.example.com, server2.example.com, db1.example.com, and db2.example.com are the hosts categorized into groups web_servers and db_servers.

Whenever there's a change in your infrastructure, such as adding a new server or removing an existing one, you'd have to manually update this file.

Dynamic Inventory: With dynamic inventory, Ansible can fetch the list of hosts automatically from various sources. Ansible provides built-in dynamic inventory scripts for popular cloud providers like AWS, Azure, and Google Cloud Platform, among others. Additionally, you can create custom dynamic inventory scripts to pull information from your own infrastructure sources.

For example, Ansible includes a dynamic inventory script for AWS (ec2.py), which queries the AWS API to fetch information about EC2 instances. To use it, you would first configure the AWS credentials, and then you can use it like this:

ansible -i /path/to/ansible/contrib/inventory/ec2.py web_servers -m ping
This command tells Ansible to use the ec2.py script as the inventory source (-i flag), and it targets the group web_servers to run the ping module against all instances in that group.

When you run Ansible commands using dynamic inventory, Ansible fetches the current list of hosts from the specified source (in this case, AWS), ensuring that your inventory is always up-to-date without manual intervention.

So, in summary, static inventory requires manual maintenance of the inventory file, while dynamic inventory automatically fetches the list of hosts from external sources, making it more adaptable to changes in the infrastructure.